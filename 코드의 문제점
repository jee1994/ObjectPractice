캡슐화의 위반 :

수정자와 접근자가 존재하지만 사실 수정자와 접근자는 캡슐화를 보장하지 않고 오히려 더 잘 보여준다 
각각의 역할을 고려하지 않고 설계를 할때 개발자는 역할을 추측 할수 밖에 없는데. 그렇게 되면 접근자를 많이 만들게 된다 .

높은 결합도 : 

객체가 다른 많은 객체의 데이터에 의존하고 있으면, 다른 객체에서 변화가 일어날때 수정을 해줘야하므로, 좋지않다. 약간. 브릿지랑 비슷한 느낌?

낮은 응집도: 

하나의 객체가 많은 역할을 하게 되면 그 객체를 수정해야할 원인도 많아지며, 하나의 원인을 수정함으로써 다른 부분의 코드에서 에러가 일어날수 있다. 
하나의 요구사항의 변화에도 다수의 객체를 수정해야한다. 
