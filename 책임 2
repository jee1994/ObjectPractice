1.어떠한 책임을 지정할때 프로그래머는 그 책임을 수행하는데 필요한 가장 많은 정보를 가지고 있는 객체를 지정한다. 
  결합도를 낮추고 응집도를 높여야한다. (새로운 기능이나 문제가 발생했을때 두가지 이상의 이유로  객체를 수정해서는 안된다) 
  
  변경의 이유에 따라 클래스를 분리하여야한다. 보통 클래스를 분리할때는 이 상황을 봐야한다. 
  
  응집도가 낮은지 확인하는법 
  1. 인스턴스 변수가 초기화 될 때 한번에 모든 변수가 초기화되지 않는다 . (함께 초기화되는 속성을 기준으로 클래스를 나눠야한다.)
  2. 메서드들이 인스턴스 변수를 사용할때 많은 변수를 사용할수록 응집도가 높다. 
  
  하지만 너무 나누다 보면 캡슐화의 문제가 생긴다 .그래서 인터페아스를 이용한다. 
  
  객체의 타입에 따라 역할이 달라지면 각 타입의 책임으로 넘긴다 -> Polymorphism
